#include "SignatureReader.h"
#include <gtest/gtest.h>

namespace
{
using namespace Hexit;

TEST(SignatureReaderTest, SignatureMapping)
{
    SignatureReader reader;
    // Empty query
    EXPECT_EQ(reader.get_type({}), std::string("unk"));
    // There are some extra query bytes at the end of the valid signature sequence
    EXPECT_EQ(reader.get_type({ 0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, 0xFF, 0x09, 0x43 }), std::string("png"));
    // There are extra query bytes at the beginning of a valid signature sequence
    EXPECT_EQ(reader.get_type({ 0x43, 0xDD, 0x76, 0x00, 0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A }), std::string("unk"));
    // The query bytes match exactly with a signature
    EXPECT_EQ(reader.get_type({ 0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A }), std::string("png"));
    EXPECT_EQ(reader.get_type({ 0x30, 0x26, 0xB2, 0x75, 0x8E, 0x66, 0xCF, 0x11, 0xA6, 0xD9, 0x00, 0xAA, 0x00, 0x62, 0xCE, 0x6C }), std::string("asf"));
    EXPECT_EQ(reader.get_type({ 0xFF, 0xD8, 0xFF, 0xE0, 0x00, 0x10, 0x4A, 0x46, 0x49, 0x46, 0x00, 0x01 }), std::string("jpg"));
    // Bytes 4, 5 will be skiped
    EXPECT_EQ(reader.get_type({ 0xFF, 0xD8, 0xFF, 0xE1, 0xFF, 0xFF, 0x45, 0x78, 0x69, 0x66, 0x00, 0x00 }), std::string("jpg"));
    EXPECT_EQ(reader.get_type({ 0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A }), std::string("png"));
    // Bytes 4, 5, 6, 7 will be skiped
    EXPECT_EQ(reader.get_type({ 0x52, 0x49, 0x46, 0x46, 0xBB, 0xEE, 0xEE, 0xFF, 0x57, 0x41, 0x56, 0x45 }), std::string("wav"));
    EXPECT_EQ(reader.get_type({ 0x21, 0x3C, 0x61, 0x72, 0x63, 0x68, 0x3E, 0x0A }), std::string("deb"));
    EXPECT_EQ(reader.get_type({ 0x42, 0x4C, 0x45, 0x4E, 0x44, 0x45, 0x52 }), std::string("blend"));
    EXPECT_EQ(reader.get_type({ 0x47, 0x49, 0x46, 0x38, 0x37, 0x61 }), std::string("gif"));
    EXPECT_EQ(reader.get_type({ 0x47, 0x49, 0x46, 0x38, 0x39, 0x61 }), std::string("gif"));
    EXPECT_EQ(reader.get_type({ 0x37, 0x7A, 0xBC, 0xAF, 0x27, 0x1C }), std::string("7z"));
    EXPECT_EQ(reader.get_type({ 0xFD, 0x37, 0x7A, 0x58, 0x5A, 0x00 }), std::string("xz"));
    EXPECT_EQ(reader.get_type({ 0x25, 0x50, 0x44, 0x46, 0x2D }), std::string("pdf"));
    EXPECT_EQ(reader.get_type({ 0xFF, 0xD8, 0xFF, 0xDB }), std::string("jpg"));
    EXPECT_EQ(reader.get_type({ 0xFF, 0xD8, 0xFF, 0xDB }), std::string("jpg"));
    EXPECT_EQ(reader.get_type({ 0xFF, 0xD8, 0xFF, 0xE0 }), std::string("jpg"));
    EXPECT_EQ(reader.get_type({ 0x50, 0x4B, 0x03, 0x04 }), std::string("zip"));
    EXPECT_EQ(reader.get_type({ 0x50, 0x4B, 0x05, 0x06 }), std::string("zip"));
    EXPECT_EQ(reader.get_type({ 0x50, 0x4B, 0x07, 0x08 }), std::string("zip"));
    EXPECT_EQ(reader.get_type({ 0x4F, 0x67, 0x67, 0x53 }), std::string("ogg"));
    EXPECT_EQ(reader.get_type({ 0x66, 0x4C, 0x61, 0x43 }), std::string("flac"));
    EXPECT_EQ(reader.get_type({ 0x1A, 0x45, 0xDF, 0xA3 }), std::string("mkv"));
    EXPECT_EQ(reader.get_type({ 0x00, 0x61, 0x73, 0x6D }), std::string("wasm"));
    EXPECT_EQ(reader.get_type({ 0x00, 0x00, 0x01, 0xBA }), std::string("mpeg"));
    EXPECT_EQ(reader.get_type({ 0x00, 0x00, 0x01, 0xB3 }), std::string("mpeg"));
    EXPECT_EQ(reader.get_type({ 0x4E, 0x45, 0x53, 0x1A }), std::string("nes"));
    EXPECT_EQ(reader.get_type({ 0x49, 0x44, 0x33 }), std::string("mp3"));
    EXPECT_EQ(reader.get_type({ 0x4E, 0x45, 0x53 }), std::string("nes"));
    EXPECT_EQ(reader.get_type({ 0x1F, 0x8B }), std::string("gz"));
    EXPECT_EQ(reader.get_type({ 0xFF, 0xFB }), std::string("mp3"));
    EXPECT_EQ(reader.get_type({ 0xFF, 0xF3 }), std::string("mp3"));
    EXPECT_EQ(reader.get_type({ 0xFF, 0xF2 }), std::string("mp3"));
    EXPECT_EQ(reader.get_type({ 0x42, 0x4D }), std::string("bmp"));
}
} // namespace
